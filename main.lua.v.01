local physics = require "physics"
physics.start(); 
local screenW, screenH, halfW = display.contentWidth, display.contentHeight, display.contentWidth*0.5
local background = display.newRect( 0, 0, screenW, screenH )
background:setFillColor( 128 )
local game = display.newGroup();
game.x = 0

-- banana toss gui

local arrow = display.newImage("images/arrow.png")
arrow.y = screenH - 50; arrow.x = 200
arrow:setReferencePoint (display.BottomLeftReferencePoint)

local powerGauge = display.newRect (40, screenH - 40, 50, 1)
powerGauge:setReferencePoint (display.BottomCenterReferencePoint)
powerGauge.yScale = 200

-- map

local leftwall = display.newRect( 0 , -1000, 20, 1000 + screenH )
physics.addBody (leftwall, "static", { friction =0.3,})
game:insert( leftwall )

local rightwall = display.newRect( screenW -20, - 1000 , 20, 1000 + screenH)
physics.addBody (rightwall, "static", { friction =0.3,})
game:insert( rightwall )

local floor = display.newRect( 0, screenH -20 , 1000, 50 )
physics.addBody (floor, "static", { friction =0.3,})
game:insert( floor )

-- block tower 

local blocktower = display.newRect( 650, screenH -70, 50, 50 )
physics.addBody (blocktower, { friction =0.3,})
game:insert( blocktower )

local blocktower2 = display.newRect( 650, screenH -120, 50, 50 )
physics.addBody (blocktower2, { friction =0.3,})
game:insert( blocktower2 )

local blocktower3 = display.newRect( 650, screenH -190, 50, 50 )
physics.addBody (blocktower3, { friction =0.3,})
game:insert( blocktower3 )

local blocktower4 = display.newRect( 650, screenH -240, 50, 50 )
physics.addBody (blocktower4, { friction =0.3,})
game:insert( blocktower4 )

-- Banana Object

local physicsData = (require "banana").physicsData()
local banana = display.newImage("images/banana.png")
banana.x = 150; banana.y = 550
physics.addBody( banana, physicsData:get("banana") )
game:insert( banana )

-- Banana Toss Function
function bananaToss(event)	
	local banana = event.target 
	banana:applyLinearImpulse( 10, -10, banana.x, banana.y )
end

-- Arrow Rotation Function
rotationDirection = 1
arrowStop = 0
local function arrowRotate() 
	if (arrow.rotation < 90 and arrowStop==0) then
	arrow.rotation = arrow.rotation - 2 * rotationDirection
	end
	if (arrow.rotation == -90 and arrowStop==0) then
	rotationDirection = -1
	else if (arrow.rotation == 0 and arrowStop==0) then
	rotationDirection = 1
	end end
	
end
-- banana Shoot uses arrow Touch and stopButton Functions

local function bananaShoot()
	if (powerGaugeStop == 1 and arrowStop == 1 ) then
	print (forceY)
	banana:applyLinearImpulse( 10, 10, banana.x, banana.y )
	end
end

-- Arrow Touch Function
powerGaugeNum = 0
function arrowSelect(event)
	arrowStop = 1
	local arrow = event.target 
	arrowAngle = arrow.rotation
	forceMagnitude = powerGaugeNum
	local angle = math.rad(arrow.rotation)
	forceX = math.cos(angle)*forceMagnitude 
	forceY = math.sin(angle)*forceMagnitude
	print (arrowAngle)
end

-- Move Camera Function
function moveCamera()
	game.y = -banana.y + screenH /2
	game.x = -banana.x + screenW /2
end

-- Power Gauge Function

local powerGaugeMove
local powerGaugeMoveBack

powerGaugeMoveBack = function()
	moveUp = transition.to( powerGauge, { time=1000, yScale=200, onComplete=powerGaugeMove } )
	print ("2")

end

powerGaugeMove = function()
	moveDown = transition.to( powerGauge, { time=1000, yScale=1, onComplete=powerGaugeMoveBack } )
	print ("1")
end

powerGaugeMove()
powerGaugeStop = 0
local function stopButton(event)
	powerGaugeStop = 1
	local powerGauge = event.target
	print ( powerGauge.yScale )
	powerGaugeNum = powerGauge.yScale /10
	transition.cancel(moveDown)
	transition.cancel(moveUp)
	bananaShoot()
end

-- Banana Shoot Function



-- Runtimes ETC

powerGauge:addEventListener("tap", stopButton)
Runtime:addEventListener("enterFrame", moveCamera )
Runtime:addEventListener("enterFrame", arrowRotate)
banana:addEventListener("tap", bananaToss)
arrow:addEventListener("tap", arrowSelect)